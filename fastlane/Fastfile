# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# default_platform(:ios)
fastlane_require 'circleci_artifact'
fastlane_version "2.93.1"

BUILD_PATH="./build"
DERIVED_DATA_PATH = "#{BUILD_PATH}/derived_data"
PROJECT_NAME='BonMot.xcodeproj'

platform :mac do
  desc "Runs Tests & Generates Code Coverage Reports for macOS"
  lane :coverage_macos do
    coverage(scheme: "BonMot-OSX")
  end
end

platform :ios do
  desc "Tests: iOS, tvOS. Builds: watchOS."
  lane :coverage_all do
    coverage_ios
    coverage_tvos
    # Unit testing is not available on watchOS
    build_watchos
  end

  desc "Runs Tests & Generates Code Coverage Reports for iOS 10.3.1 and latest iOS"
  lane :coverage_ios do
    devices = get_devices(ios_latest: true, ios_10_3: true)
    coverage(scheme: "BonMot-iOS",
             devices: devices)
  end

  desc "Runs Tests & Generates Code Coverage Reports for iOS 10.3.1"
  lane :coverage_ios_10_3 do
    devices = get_devices(ios_10_3: true)
    coverage(scheme: "BonMot-iOS",
             devices: devices)
  end

  desc "Runs Tests & Generates Code Coverage Reports for latest iOS"
  lane :coverage_ios_latest do
    devices = get_devices(ios_latest: true)
    coverage(scheme: "BonMot-iOS",
             devices: devices)
  end

  desc "Runs Tests & Generates Code Coverage Reports for tvOS"
  lane :coverage_tvos do
    coverage(scheme: "BonMot-tvOS")
  end

  # Tests cannot be run on watchOS
  desc "Build for watchOS"
  lane :build_watchos do
    xcodebuild(scheme: "BonMot-watchOS",
               derivedDataPath: DERIVED_DATA_PATH)
  end
end


def coverage(scheme:, devices: nil)
  scan_output_path = "#{BUILD_PATH}/#{scheme}/scan"

  # NOTE: Running too many devices concurrently breaks CircleCI resource limits
  max_concurrent_simulators = nil
  if ENV['CIRCLE_BUILD_NUM']
    max_concurrent_simulators = 1
  end

  begin
    scan(
      output_types: 'junit,html',
      devices: devices,
      scheme: scheme,
      output_directory: scan_output_path,
      code_coverage: true,
      derived_data_path: DERIVED_DATA_PATH,
      result_bundle: true,
      max_concurrent_simulators: max_concurrent_simulators
    )
  rescue => ex
    # Don't fail the entire lane when running tests, but print failure to STDERR
    STDERR.puts ex
  end

  trainer(output_directory: scan_output_path)

  if ENV["CIRCLE_TEST_REPORTS"]
    trainer(output_directory: ENV["CIRCLE_TEST_REPORTS"])
  end

  result_bundle_path = Scan.cache[:result_bundle_path]
  xchtmlreport(result_bundle_path: result_bundle_path)
  
  slather_use_circleci = "false"

  if ENV['CIRCLE_BUILD_NUM']
    slather_use_circleci = "true"
  end

  xcov(
    project: PROJECT_NAME,
    scheme: scheme,
    output_directory: "#{BUILD_PATH}/#{scheme}/xcov",
    derived_data_path: DERIVED_DATA_PATH
  )

  # Add binaries here as you create internal frameworks
  slather_binaries = ['BonMot']
  slather_output_directory = "#{BUILD_PATH}/#{scheme}/slather"

  # html and cobertura_xml output must be run separately
  slather(
    proj: PROJECT_NAME,
    scheme: scheme,
    binary_basename: slather_binaries,
    output_directory: slather_output_directory,
    html: "true",
    build_directory: DERIVED_DATA_PATH
  )
  # Using Cobertura XML allows us to upload to Codecov.io
  # Uploading to codecov is handled separately in the .circleci/config.yml
  slather(
    proj: PROJECT_NAME,
    scheme: scheme,
    binary_basename: slather_binaries,
    output_directory: slather_output_directory,
    circleci: slather_use_circleci,
    cobertura_xml: "true",
    build_directory: DERIVED_DATA_PATH
  )
  result_bundle_path
end

def get_devices(ios_latest: false, ios_10_3: false, circleci: nil)
  # The full list of iOS simulators available on CircleCI
  # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
  devices = []
  if ios_latest
    devices.push("iPhone SE")
    devices.push("iPhone X")
    if !circleci
      devices.push("iPhone 8")
      devices.push("iPhone 8 Plus")
      devices.push("iPad Pro (10.5-inch)")
    end
  end

  if ios_10_3
    devices.push("iPhone SE (10.3.1)")
    devices.push("iPhone 7 (10.3.1)")
    if !circleci
      devices.push("iPhone 7 Plus (10.3.1)")
      devices.push("iPad Pro (10.5-inch) (10.3.1)")
    end
  end
  devices
end